#!/usr/bin/perl

#[ Script ]--------------------------------------------------------------------#
#                                                                              #
# genericseek                                                                  #
#                                                                              #
# PT-br:                                                                       #
# Conta quantidade de ocorrências de um trecho até o final do log e armazena a #
# posição para contar a partir de onde parou.                                  #
# Ótimo  para  criar  monitorações  em  tempo  real  de  logs  que estão sendo #
# incrementados.                                                               #
# ----------------------------                                                 #
#                                                                              #
# EN:                                                                          #
# Counts  number  of occurrences of a stretch to the end of the log and stores #
# the position to tell from where it stopped.                                  #
# Great  for  creating  monitoring  processes in real time logs that are being #
# increased.                                                                   #
#                                                                              #
# rlima@gmail.com                                                              #
# $Id: genericseek,v 1.5 2015/01/23 rlima Exp rlima $                          #
#                                                                              #
#[ License ]-------------------------------------------------------------------#
#                                                                              #
# Copyright (c) 2014 Reinaldo Marques de Lima reimlima@gmail.com               #
#                                                                              #
# PT-br:                                                                       #
# A permissão  é  concedida,  a título gratuito, a qualquer pessoa que obtenha #
# uma   cópia   deste   software   e   arquivos   de  documentação  associados #
# (o "Software"),  para  lidar  com  o  Software sem restrição, incluindo, sem #
# limitação,  os  direitos  de  usar,  copiar,  modificar,  mesclar, publicar, #
# distribuir,  sublicenciar,  e / ou vender cópias do Software, e permitir que #
# as  pessoas  a  quem  o  Software  é fornecido o façam, sujeito às seguintes #
# condições:                                                                   #
#                                                                              #
# O  aviso de copyright acima e este aviso de permissão devem ser incluídos em #
# todas as cópias ou partes substanciais do Software.                          #
#                                                                              #
# O  SOFTWARE É FORNECIDO "COMO ESTÁ", SEM GARANTIA DE QUALQUER TIPO, EXPRESSA #
# OU  IMPLÍCITA,  INCLUINDO,  SEM  LIMITAÇÃO, AS GARANTIAS DE COMERCIALIZAÇÃO, #
# ADEQUAÇÃO  A  UM  DETERMINADO  FIM E NÃO VIOLAÇÃO. EM NENHUM CASO OS AUTORES #
# OU  DIREITOS AUTORAIS TITULARES  SERÃo RESPONSÁVEIS POR QUALQUER RECLAMAÇÃO, #
# DANOS  OU  OUTRAS  RESPONSABILIDADES,  SEJA  EM  UMA  AÇÃO DE CUMPRIMENTO DE #
# CONTRATO OU DE OUTRA FORMA, DECORRENTE DE, OU EM CONEXÃO COM O SOFTWARE OU O #
# USO OU OUTRAS FUNÇÕES DO SOFTWARE.                                           #
#                                                                              #
# Exceto  conforme  contido no presente aviso, o nome do (s) dos detentores de #
# direitos  autorais acima não devem ser utilizados em publicidade ou de outra #
# forma  para  promover  a venda, uso ou outras negociações deste Software sem #
# autorização prévia por escrito.                                              #
#                                                                              #
#----------------------------                                                  #
#                                                                              #
# EN:                                                                          #
# Permission is hereby granted, free of charge, to any person obtaining a copy #
# of  this  software  and  associated  documentation  files  (the "Software"), #
# to  deal  in  the Software without restriction, including without limitation #
# the  rights  to  use,  copy, modify, merge, publish, distribute, sublicense, #
# and/or  sell  copies  of  the  Software,  and  to permit persons to whom the #
# Software is furnished to do so, subject to the following conditions:         #
#                                                                              #
# The  above  copyright notice and this permission notice shall be included in #
# all copies or substantial portions of the Software.                          #
#                                                                              #
# THE  SOFTWARE  IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR #
# IMPLIED,  INCLUDING  BUT  NOT  LIMITED TO THE WARRANTIES OF MERCHANTABILITY, #
# FITNESS  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE #
# AUTHORS  OR  COPYRIGHT  HOLDERS  BE  LIABLE  FOR ANY CLAIM, DAMAGES OR OTHER #
# LIABILITY,   WHETHER   IN   AN   ACTION  OF  CONTRACT,  TORT  OR  OTHERWISE, #
# ARISING FROM,  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER #
# DEALINGS IN THE SOFTWARE.                                                    #
#                                                                              #
# Except  as  contained  in  this  notice,  the name(s) of the above copyright #
# holders  shall  not be used in advertising or otherwise to promote the sale, #
# use or other dealings in this Software without prior written authorization.  #
#                                                                              #
#------------------------------------------------------------------------------#

#[ Modules ]-------------------------------------------------------------------#

use strict;
use JSON;
use File::stat;
use XML::Simple;
use Config::Simple;
use Digest::MD5 qw(md5_hex);

#[ Variables ]-----------------------------------------------------------------#

my $ds;
my %ds;
my $md5;
my $dbmd5;
my $config;
my $dbfile;
my $output;
my $filemd5;
my $filestat;
my $exitcode;
my $exitPrint;
my $xmloutput;
my $jsonoutput;
my $exitStatus;
my $exitmessage;
my $md5filehash;
my $nagiosoutput;
my $outputformat;
my $lasfileupdate;
my $warningmaxage;
my $criticalmaxage;
my $monitoringfile;
my $doublecheckfile;
my $timestamp = time();
my $configfile = 'genericfileage.conf';

#[ Command line option for config file recovery ]------------------------------#

if ( $ARGV[0] && $ARGV[0] =~ /-r/){
	&createConfigFile
} elsif( $ARGV[0] && $ARGV[0] !=~ /-r/) {
	genericExitFunc(1, "$0 just suport '-r' option\n");
}

#[ Read config file ]----------------------------------------------------------#

if( -z $configfile){
	genericExitFunc(1, "$configfile is empty, run with '-r' option to recreate\n");
} else {
	$config = new Config::Simple($configfile);
	$dbfile = $config->param("dbfile");
	$outputformat = $config->param("outputformat");
	$warningmaxage = $config->param("warningmaxage");
	$criticalmaxage = $config->param("criticalmaxage");
	$monitoringfile = $config->param("monitoringfile");
}

if($dbfile eq "" || ref($dbfile) eq "ARRAY"){genericExitFunc(2, "dbfile value is empty, fix the $configfile\n");}
if($outputformat eq "" || ref($outputformat) eq "ARRAY"){ genericExitFunc(2, "outputformat value is empty, fix the $configfile\n"); }
if($warningmaxage eq "" || ref($warningmaxage) eq "ARRAY"){ genericExitFunc(2, "warningmaxage value is empty, fix the $configfile\n"); }
if($criticalmaxage eq "" || ref($criticalmaxage) eq "ARRAY"){ genericExitFunc(2, "criticalmaxage value is empty, fix the $configfile\n"); }
if($monitoringfile eq "" || ref($monitoringfile) eq "ARRAY"){ genericExitFunc(2, "monitoringfile value is empty, fix the $configfile\n"); }

#[ Config File Write Function ]------------------------------------------------#

sub createConfigFile {
	if( -z $configfile){
		$config = new Config::Simple(syntax=>'simple');
		$config->param("dbfile=", "\"\"");
		$config->param("outputformat=", "\"\"");
		$config->param("warningmaxage=", "\"\"");
		$config->param("criticalmaxage=", "\"\"");
		$config->param("monitoringfile=", "\"\"");
		$config->write($configfile);
		genericExitFunc(0, "$configfile created successfully!\n");
	} else {
		genericExitFunc(1, "$configfile is not empty\n");
	}
}

#[ Generic exit function ]-----------------------------------------------------#

sub genericExitFunc {
	$exitcode = shift;
	$exitmessage = shift;
	print "$exitmessage";
	exit $exitcode;
}

#[ XML Output Function ]-------------------------------------------------------#

sub xmlGenerate {
	$timestamp = shift;
	$exitPrint = shift;
	$exitStatus = shift;
	$xmloutput = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
	$ds = {fileage => [{timestamp => [$timestamp], exitMessage => [$exitPrint], exitStatus => [$exitStatus]}]};
	$xmloutput .= XMLout($ds, Rootname => "");
	return $xmloutput;
}

#[ JSON Output Function ]------------------------------------------------------#

sub jsonGenerate {      
	$timestamp = shift;
	$exitPrint = shift;
	$exitStatus = shift;
	%ds = ('fileage' => [{'timestamp' => $timestamp}, {'exitMessage' => $exitPrint}, {'exitStatus' => $exitStatus}]);
	$jsonoutput = encode_json \%ds;
	return $jsonoutput;
}

sub doubleCheck {
	$doublecheckfile = shift;
	open(FILE, $doublecheckfile);
	$md5 = <FILE>;
	$md5filehash = md5_hex($md5);
	close (FILE);
	return $md5filehash;
}

#[ Main Script ]---------------------------------------------------------------#

# Catch timestamp from the file that beeing monitored

$filestat = stat($monitoringfile) or genericExitFunc(2, "No $monitoringfile: $!");
$lasfileupdate = $timestamp - $filestat->[10];

# Verifying thresholds

if ($lasfileupdate >= $criticalmaxage) {
	$exitPrint = "CRITICAL | File $monitoringfile not updated in $lasfileupdate seconds";
	$exitStatus = "2";
} elsif ($lasfileupdate >= $warningmaxage) {
	$exitPrint = "Warning | File $monitoringfile not updated in $lasfileupdate seconds";
	$exitStatus = "1";
} else {
	# Checking if some malicious sysadmin is trying to cheat the script
	$filemd5 = doubleCheck($monitoringfile);
	open(DBFILE, $dbfile) or genericExitFunc(1, "Error trying to open the file $dbfile\n");
	$dbmd5 = <DBFILE>;
	close(DBFILE);
	if ($dbmd5 != "" && $dbmd5 == $filemd5) {
		$exitPrint = "CRITICAL | File $monitoringfile does not seem to be being updated";
		$exitStatus = "2";
		open(DBFILE, "> $dbfile") or genericExitFunc(1, "Error trying to open the file $dbfile\n");
		print DBFILE "$filemd5";
		close(DBFILE);
	} elsif ($dbmd5 !~ /^[a-z0-9]+$/) {
		print "$dbmd5\n";
		$exitPrint = "CRITICAL | File $monitoringfile has no any old md5 reference";
		$exitStatus = "2";
		open(DBFILE, "> $dbfile") or genericExitFunc(1, "Error trying to open the file $dbfile\n");
		print DBFILE "$filemd5";
		close(DBFILE);
	} else {
		$exitPrint = "OK";
		$exitStatus = "0";
	}
}

#[ Verify the chosen output format, call the function and print ]--------------#

if ($outputformat =~ "xml") {
	$output .= xmlGenerate($timestamp, $exitPrint, $exitStatus);
} elsif ($outputformat =~ "json") {
	$output .= jsonGenerate($timestamp, $exitPrint, $exitStatus);
} elsif ($outputformat =~ "graphite") {
	$output .= "fileage $lasfileupdate $timestamp\n";
} else {
	$output .= "$exitPrint";
}

&genericExitFunc($exitStatus, $output);
